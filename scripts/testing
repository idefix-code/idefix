#!/usr/bin/env bash
set -ue

declare action=( do_error 1 "Error: no action specified (expected 'compile' or 'run')\n" )
declare gpu_model=""
declare -a IDEFIX_CMAKE_OPTIONS=( )
declare -a IDEFIX_MAKE_OPTIONS=( )

while (( $# > 0 )); do
    opt="$1"; shift
    case "$opt" in
        compile) action=( do_compile "$@" );   break;;
        run)     action=( do_run "$@" );       break;;
        list)    action=( do_list "$@" ); break;;
        --gpu)   gpu_model="$1"; shift;; 
        *)
            action=( do_error 2 "Error: unknown option '%s' (expected 'compile' or 'run', or a dashed option)\n" "$1"  )
            break
            ;;
    esac
done

function set_vars() {
    IDEFIX_DIR="$PWD"
    IDEFIX_TEST="$1"; shift
    if (($# > 0)); then
        IDEFIX_SUBTESTS=( "$@" )
    else
        IDEFIX_SUBTESTS=( $(cd "test/$IDEFIX_TEST/idefix-build.d" && ls) )
    fi
    setup_env
    set_gpu_options "$gpu_model"
}

source scripts/etc/env-$(hostname).sh

function show_help() {
    cat <<EOF
Usage: $0 (compile|run) TEST [SUB_TEST...]
    OR $0 list [TEST]

Run an Idefix test suite (available in the test/ directory).
EOF
}

function do_list() {
    find test -name idefix-build.d | while read test; do
        test="${test#*/}"
        printf "Test: %s\n" "${test%/*}"
        for sub_test in "test/$test/"*; do
            printf "  - sub-test: %s\n" "${sub_test##*/}"
        done
    done
}
function do_error() {
    local errno="$1"; shift
    printf "$@" >&2
    show_help
    return "$errno"
}
function do_compile() (
    set_vars "$@"
    cd "test/$IDEFIX_TEST"
    local stdout

    exec {stdout}>&1
    for test in "${IDEFIX_SUBTESTS[@]}"; do
        (
            printf "Compiling test: %s (logs in %s)\n" "$test" "$PWD/$test.log" >&"$stdout"
            cd "idefix-build.d/$test"
            in_env cmake "$IDEFIX_DIR" "${IDEFIX_CMAKE_OPTIONS[@]}"
            in_env make "${IDEFIX_MAKE_OPTIONS[@]}"
            printf "Finished test: %s\n" "$test" >&"$stdout"
        ) > "$test.log" 2>&1 &
    done
    exec {stdout}>&-

    wait
)
function do_run() (
    set_vars "$@"
    cd "test/$IDEFIX_TEST"
    local stdout

    exec {stdout}>&1
    for test in "${IDEFIX_SUBTESTS[@]}"; do
        (
            printf "Running test: %s (logs in %s)\n" "$PWD/$test-run.log" >&"$stdout"
            cd "idefix-build.d/$test"
            in_env ./idefix
            printf "Finished test: %s\n" >&"$stdout"
            
        ) >"$test-run.log" 2>&1 &
    done
    exec {stdout}>&-

    wait
)

"${action[@]}"
